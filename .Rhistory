origin_sce$group <- origin_sce$cell_type
assays(origin_sce)$counts <- assays(origin_sce)$X
scDiffusion_sce$group <- scDiffusion_sce$label
assays(scDiffusion_sce)$counts <- assays(scDiffusion_sce)$X
scGAN_sce$group <- scGAN_sce$cluster
assays(scGAN_sce)$counts <- assays(scGAN_sce)$X
scVI_sce$group <- scVI_sce$celltype
assays(scVI_sce)$counts <- assays(scVI_sce)$X
SCEList <- list(origin = origin_sce,scDiffusion = scDiffusion_sce,scGAN=scGAN_sce,scVI=scVI_sce)
origin_sce_result <- calculateClusterParameters(SCEList)
source("R/calculateBatchParameters.R")
sce <- readRDS("E:/Datas/Batch/293T/origin/filtered_adj_293T.rds")
source("R/calcDEGs.R")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
#simu_sce2 <- readH5AD("E:/Datas/PythonDatas/MouseBrain/simu/scGAN_simu_MouseBrain.h5ad")
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scVI_simu_Inhouse.h5ad")
colData(simu_sce2)
#修改顺序
table(origin_sce$cell_type)
table(simu_sce1$label)
table(simu_sce2$cluster)
table(simu_sce3$celltype)
dim(origin_sce)
dim(simu_sce1)
dim(simu_sce2)
dim(simu_sce3)
origin_sce$group <- origin_sce$cell_type
simu_sce1$group <- simu_sce1$label
simu_sce2$group <- simu_sce2$cluster
simu_sce3$group <- simu_sce3$celltype
table(origin_sce$group)
table(simu_sce1$group)
table(simu_sce2$group)
table(simu_sce3$group)
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
#名称记得修改
ddsList <- list(origin = origin_sce, scDiffusion = simu_sce1, scVI = simu_sce3)
result <- calculateDEGsParameters(ddsList)
View(result)
View(origin_sce_result)
sce <- readRDS("E:/Datas/Batch/293T/origin/filtered_adj_293T.rds")
matrix <- assays(sce)$counts
sce$Batch <- sce$cell_type
SCEList <- list(origin = sce)
SCEList <- list(origin = sce, sce1 = sce)
result1 <- calculateBatchParameters(SCEList)
View(result1)
rm(list = ls())
source("R/calcDataProperty.R")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/LSH-GAN_sim.h5ad")
simu_sce2 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scGAN_simu_Inhouse.h5ad")
simu_sce4 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scRDiT_sim.h5ad")
simu_sce5 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scVI_simu_Inhouse.h5ad")
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
rm(list = ls())
source("R/calcDataProperty.R")
source("R/calculateCorrelations.R")
source("R/calculateDispersionsddsList.R")
source("R/calculateStats.R")
source("R/makeDF.R")
source("R/StandardizedCalculationScore.R")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
#simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/LSH-GAN_sim.h5ad")
simu_sce2 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scGAN_simu_Inhouse.h5ad")
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
#assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
SCEList <- list( origin = origin, scDiffusion = simu_sce2, scGAN = simu_sce3)
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3)
counts_list <- lapply(SCEList, function(sce) {
# 提取 counts 矩阵
counts <- assays(sce)$counts
return(counts)
})
View(counts_list)
# 保留原始名称（如果 SCEList 是命名列表）
names(counts_list) <- names(SCEList)
View(counts_list)
result_list <- calcDataProperty(SCEList)
assays(scGAN)$counts <- as.matrix(assays(scGAN)$counts)
assays(simu_sce3)$counts <- as.matrix(assays(simu_sce3)$counts)
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3)
counts_list <- lapply(SCEList, function(sce) {
# 提取 counts 矩阵
counts <- assays(sce)$counts
return(counts)
})
# 保留原始名称（如果 SCEList 是命名列表）
names(counts_list) <- names(SCEList)
View(counts_list)
result_list <- calcDataProperty(SCEList)
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scGAN_simu_Inhouse.h5ad")
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3)
counts_list <- lapply(SCEList, function(sce) {
# 提取 counts 矩阵
counts <- assays(sce)$counts
return(counts)
})
# 保留原始名称（如果 SCEList 是命名列表）
names(counts_list) <- names(SCEList)
result_list <- calcDataProperty(counts_list)
assays(simu_sce3)$counts <- as.matrix(assays(simu_sce3)$counts)
assays(simu_sce3)$counts <- as.matrix(assays(simu_sce3)$counts)
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
#simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/LSH-GAN_sim.h5ad")
simu_sce2 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scGAN_simu_Inhouse.h5ad")
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
#assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3)
counts_list <- lapply(SCEList, function(sce) {
# 提取 counts 矩阵
counts <- assays(sce)$counts
return(counts)
})
# 保留原始名称（如果 SCEList 是命名列表）
names(counts_list) <- names(SCEList)
result_list <- calcDataProperty(counts_list)
assays(simu_sce3)$counts <- as.matrix(assays(simu_sce3)$counts)
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3)
counts_list <- lapply(SCEList, function(sce) {
# 提取 counts 矩阵
counts <- assays(sce)$counts
return(counts)
})
# 保留原始名称（如果 SCEList 是命名列表）
names(counts_list) <- names(SCEList)
result_list <- calcDataProperty(counts_list)
View(result_list)
normalized_list <- StandardizedCalculationScore(result_list)
View(normalized_list)
ttt <- readRDS("E:/R_Files/countsimQC/countsimQC_reportPythonresult/Inhouse_result.rds")
ttt <- readRDS("E:/R_Files/countsimQC/countsimQC_report/Pythonresult/Inhouse_result.rds")
View(ttt)
df <- StandardizedCalculationScore(tmp_list = ttt)
View(df)
rm(list = ls())
source("R/calcDataProperty.R")
source("R/calculateCorrelations.R")
source("R/calculateDispersionsddsList.R")
source("R/calculateStats.R")
source("R/makeDF.R")
source("R/StandardizedCalculationScore.R")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
#simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/LSH-GAN_sim.h5ad")
simu_sce2 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scGAN_simu_Inhouse.h5ad")
simu_sce4 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scRDiT_sim.h5ad")
simu_sce5 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scVI_simu_Inhouse.h5ad")
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
#assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
assayNames(simu_sce4)[assayNames(simu_sce4) == "X"] <- "counts"
assayNames(simu_sce5)[assayNames(simu_sce5) == "X"] <- "counts"
assays(simu_sce3)$counts <- as.matrix(assays(simu_sce3)$counts)
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3, scRDiT = simu_sce4, scVI = simu_sce5)
test <- calcDataPropertyScores(SCEList)
View(test)
ttt <- readRDS("E:/R_Files/countsimQC/countsimQC_report/Pythonresult/Inhouse_result.rds")
df <- StandardizedCalculationScore(tmp_list = ttt)
View(df)
View(ttt)
rm(list = ls())
devtools::document()
devtools::user_package()
devtools::user_package("kBET")
load("E:/R_Files/newProject/data/origin.rda")
View(origin)
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
unlink("NAMESPACE")
unlink("man", recursive = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
unlink("NAMESPACE")
unlink("man", recursive = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
unlink("NAMESPACE")
unlink("man", recursive = TRUE)
devtools::document()
devtools::document()
rm(list = ls())
rm(list = ls())
source("R/calcDataProperty.R")
source("R/calculateCorrelations.R")
source("R/calculateDispersionsddsList.R")
source("R/calculateStats.R")
source("R/makeDF.R")
source("R/StandardizedCalculationScore.R")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
#simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/LSH-GAN_sim.h5ad")
simu_sce2 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scGAN_simu_Inhouse.h5ad")
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
#assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
assays(simu_sce3)$counts <- as.matrix(assays(simu_sce3)$counts)
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3)
test <- calcDataPropertyScores(SCEList)
source("R/calcDataProperty.R")
source("R/calculateCorrelations.R")
source("R/calculateDispersionsddsList.R")
source("R/calculateStats.R")
source("R/makeDF.R")
source("R/StandardizedCalculationScore.R")
test <- calcDataPropertyScores(SCEList)
View(test)
View(test$result_list$Lib)
source("R/calcDataProperty.R")
source("R/calculateCorrelations.R")
source("R/calculateDispersionsddsList.R")
source("R/calculateStats.R")
source("R/makeDF.R")
source("R/StandardizedCalculationScore.R")
test <- calcDataPropertyScores(SCEList)
View(test)
source("R/calcDataProperty.R")
source("R/calculateCorrelations.R")
source("R/calculateDispersionsddsList.R")
source("R/calculateStats.R")
source("R/makeDF.R")
source("R/StandardizedCalculationScore.R")
test <- calcDataPropertyScores(SCEList)
source("R/calcDataProperty.R")
source("R/calculateCorrelations.R")
source("R/calculateDispersionsddsList.R")
source("R/calculateStats.R")
source("R/makeDF.R")
source("R/StandardizedCalculationScore.R")
test <- calcDataPropertyScores(SCEList)
source("R/calcDataProperty.R")
source("R/calculateCorrelations.R")
source("R/calculateDispersionsddsList.R")
source("R/calculateStats.R")
source("R/makeDF.R")
source("R/StandardizedCalculationScore.R")
test <- calcDataPropertyScores(SCEList)
test <- calcDataPropertyScores(SCEList, subsampleSize = 2000)
rm(list = ls())
source("R/calcDEGs.R")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
origin_sce$group <- origin_sce$cell_type
simu_sce1$group <- simu_sce1$label
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
#名称记得修改
ddsList <- list(origin = origin_sce, scDiffusion = simu_sce1)
result <- calculateDEGsParameters(ddsList)
source("R/calcDEGs.R")
source("R/calcDEGs.R")
result <- calculateDEGsParameters(ddsList)
source("R/calcDEGs.R")
result <- calculateDEGsParameters(ddsList)
source("R/calcDEGs.R")
result <- calculateDEGsParameters(ddsList)
source("R/calcDEGs.R")
result <- calculateDEGsParameters(ddsList)
result <- calculateDEGsParameters(ddsList, P.Value = 0.1)
rm(list = ls())
source("R/hello.R")
source("R/calculateCorrelations.R")
source("R/calculateDispersionsddsList.R")
source("R/calculateStats.R")
source("R/makeDF.R")
source("R/StandardizedCalculationScore.R")
source("R/calculateClusterParameters.R")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
scDiffusion_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
origin_sce$group <- origin_sce$cell_type
assays(origin_sce)$counts <- assays(origin_sce)$X
scDiffusion_sce$group <- scDiffusion_sce$label
assays(scDiffusion_sce)$counts <- assays(scDiffusion_sce)$X
SCEList <- list(origin = origin_sce,scDiffusion = scDiffusion_sce)
origin_sce_result <- calculateClusterParameters(SCEList)
View(origin_sce_result)
rm(list = ls())
warnings()
detach("package:fasano.franceschini.test", unload = TRUE)
rm(list = ls())
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
#simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/LSH-GAN_sim.h5ad")
simu_sce2 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scGAN_simu_Inhouse.h5ad")
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
#assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
assays(simu_sce3)$counts <- as.matrix(assays(simu_sce3)$counts)
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3)
test <- calcDataPropertyScores(SCEList, subsampleSize = 2000)
View(test)
View(simu_sce3)
rm(list = ls())
detach("package:ks", unload = TRUE)
warnings()
library(ks)
detach("package:ks", unload = TRUE)
library(ks)
rm(list = ls())
rm(list = ls())
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
#simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/LSH-GAN_sim.h5ad")
simu_sce2 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
#assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scGAN_simu_Inhouse.h5ad")
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
assays(simu_sce3)$counts <- as.matrix(assays(simu_sce3)$counts)
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3)
test <- calcDataPropertyScores(SCEList, subsampleSize = 2000)
remove.packages("MyNewProject")
warnings()
help("scale")
help("scale")
help("reduceDim")
help("reduceDim()")
help("reduceDim")
help("reducedDim")
rm(list = ls())
rm(list = ls())
library("dplyr")
library("zellkonverter")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
scDiffusion_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
origin_sce$group <- origin_sce$cell_type
assays(origin_sce)$counts <- assays(origin_sce)$X
scDiffusion_sce$group <- scDiffusion_sce$label
assays(scDiffusion_sce)$counts <- assays(scDiffusion_sce)$X
SCEList <- list(origin = origin_sce,scDiffusion = scDiffusion_sce)
rm(list = ls())
source("R/calcDEGs.R")
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
#simu_sce2 <- readH5AD("E:/Datas/PythonDatas/MouseBrain/simu/scGAN_simu_MouseBrain.h5ad")
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scVI_simu_Inhouse.h5ad")
origin_sce$group <- origin_sce$cell_type
simu_sce1$group <- simu_sce1$label
#simu_sce2$group <- simu_sce2$cluster
simu_sce3$group <- simu_sce3$celltype
table(origin_sce$group)
table(simu_sce1$group)
#table(simu_sce2$group)
table(simu_sce3$group)
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
#assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
rm(list = ls())
origin_sce <- readH5AD("E:/Datas/PythonDatas/InHouse/origin/filtered_rna.h5ad")
#simu_sce1 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/LSH-GAN_sim.h5ad")
simu_sce2 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scDiffusion_sim_all_num_as_origin.h5ad")
simu_sce3 <- readH5AD("E:/Datas/PythonDatas/InHouse/simu/scGAN_simu_Inhouse.h5ad")
assayNames(origin_sce)[assayNames(origin_sce) == "X"] <- "counts"
#assayNames(simu_sce1)[assayNames(simu_sce1) == "X"] <- "counts"
assayNames(simu_sce2)[assayNames(simu_sce2) == "X"] <- "counts"
assayNames(simu_sce3)[assayNames(simu_sce3) == "X"] <- "counts"
assays(simu_sce3)$counts <- as.matrix(assays(simu_sce3)$counts)
simu1[simu1 < 0] <- 0  #将负数转化为0
SCEList <- list( origin = origin_sce, scDiffusion = simu_sce2, scGAN = simu_sce3)
rm(list = ls())
kBET::kBET
help("as.matrix")
scDesign3_sce_293T_juakrt <- readRDS("E:/Datas/R_package_used_data/scDesign3_sce_293T_juakrt.rds")
usethis::use_data(scDesign3_sce_293T_juakrt)
origin_sce_293T_juakrt <- readRDS("E:/Datas/R_package_used_data/origin_sce_293T_juakrt.rds")
usethis::use_data(origin_sce_293T_juakrt)
ESCO_sce_293T_juakrt <- readRDS("E:/Datas/R_package_used_data/ESCO_sce_293T_juakrt.rds")
usethis::use_data(ESCO_sce_293T_juakrt)
muscat_sce_293T_juakrt <- readRDS("E:/Datas/R_package_used_data/muscat_sce_293T_juakrt.rds")
usethis::use_data(muscat_sce_293T_juakrt)
rm(list = ls())
aaa <- data("ESCO_sce_293T_juakrt")
rm(list = ls())
rm(list = ls())
data("origin_sce_293T_juakrt")
data("ESCO_sce_293T_juakrt", "scDesign3_sce_293T_jurkat")
data("ESCO_sce_293T_juakrt", "scDesign3_sce_293T_juakrt")
rm(list = ls())
data("ESCO_sce_293T_jurkat")
rm(list = ls())
muscat_sce_293T_jurkat <- readRDS("E:/Datas/R_package_used_data/muscat_sce_293T_juakrt.rds")
ESCO_sce_293T_jurkat <- readRDS("E:/Datas/R_package_used_data/ESCO_sce_293T_juakrt.rds")
origin_sce_293T_jurkat <- readRDS("E:/Datas/R_package_used_data/origin_sce_293T_juakrt.rds")
scDesign3_sce_293T_jurkat <- readRDS("E:/Datas/R_package_used_data/scDesign3_sce_293T_juakrt.rds")
data("ESCO_sce_293T_jurkat")
usethis::use_data(muscat_sce_293T_jurkat)
usethis::use_data(ESCO_sce_293T_jurkat)
usethis::use_data(origin_sce_293T_jurkat)
usethis::use_data(scDesign3_sce_293T_jurkat)
data("ESCO_sce_293T_jurkat", "muscat_sce_293T_jurkat")
rm(list = ls())
data("ESCO_sce_293T_jurkat", "muscat_sce_293T_jurkat")
data("ESCO_sce_293T_jurkat", "muscat_sce_293T_jurkat", "scDesign3_sce_293T_jurkat", "origin_sce_293T_jurkat")
SCEList <- list(origin=origin_sce_293T_jurkat, ESCO=ESCO_sce_293T_jurkat, muscat=muscat_sce_293T_jurkat, scDesign3 = scDesign3_sce_293T_jurkat)
result <- calcDataProperty(SCEList)
View(SCEList)
class(assays（SCEList$origin)$counts)
class(assays(SCEList$origin)$counts)
class(assays(SCEList$ESCO)$counts)
class(assays(SCEList$muscat)$counts)
class(assays(SCEList$scDesign3)$counts)
result <- calcDataProperty(SCEList)
counts_list <- lapply(SCEList, function(sce) {
# 提取 counts 矩阵
counts <- assays(sce)$counts
return(counts)
})
View(counts_list)
# 保留原始名称（如果 SCEList 是命名列表）
names(counts_list) <- names(SCEList)
View(counts_list)
result_list <- calcDataProperty(matList = counts_list, maxNForDisp = maxNForDisp, maxNForCorr = maxNForCorr,
subsampleSize = subsampleSize, kfrac = kfrac, kmin = kmin)
maxNForDisp = Inf
maxNForCorr = 25
subsampleSize = 1000
kfrac = 0.05
kmin = 5
result_list <- calcDataProperty(matList = counts_list, maxNForDisp = maxNForDisp, maxNForCorr = maxNForCorr,
subsampleSize = subsampleSize, kfrac = kfrac, kmin = kmin)
rm(list = ls())
data("ESCO_sce_293T_jurkat", "muscat_sce_293T_jurkat", "scDesign3_sce_293T_jurkat", "origin_sce_293T_jurkat")
SCEList <- list(origin=origin_sce_293T_jurkat, ESCO=ESCO_sce_293T_jurkat, muscat=muscat_sce_293T_jurkat, scDesign3 = scDesign3_sce_293T_jurkat)
test <- calcDataPropertyScores(SCEList)
View(test)
test <- calculateDEGsParameters(SCEList)
View(test)
rm(list = ls())
data("ESCO_sce_293T_jurkat", "muscat_sce_293T_jurkat", "scDesign3_sce_293T_jurkat", "origin_sce_293T_jurkat")
force(ESCO_sce_293T_jurkat)
force(muscat_sce_293T_jurkat)
force(origin_sce_293T_jurkat)
force(scDesign3_sce_293T_jurkat)
rm(list = ls())
data("ESCO_sce_293T_jurkat", "muscat_sce_293T_jurkat", "scDesign3_sce_293T_jurkat", "origin_sce_293T_jurkat")
SCEList <- list(origin=origin_sce_293T_jurkat, ESCO=ESCO_sce_293T_jurkat, muscat=muscat_sce_293T_jurkat, scDesign3 = scDesign3_sce_293T_jurkat)
test <- calculateClusterParameters(SCEList)
View(test)
usethis::use_gpl3_license()
rm(list = ls())
SPARSim_sce_Batch <- readRDS("E:/Datas/R_package_used_data/SPARSim_sce_Batch.rds")
usethis::use_data(SPARSim_sce_Batch)
splatter_sce_Batch <- readRDS("E:/Datas/R_package_used_data/splat_simu_Bcells_Batch.rds")
splatter_sce_Batch <- readRDS("E:/Datas/R_package_used_data/splat_sce_Batch.rds")
usethis::use_data(splatter_sce_Batch)
data("splatter_sce_Batch", "SPARSim_sce_Batch")
rm(list = ls())
data("splatter_sce_Batch", "SPARSim_sce_Batch")
View(SPARSim_sce_Batch)
View(splatter_sce_Batch)
SCEList <- list(SPARSim = SPARSim_sce_Batch, splatter=splatter_sce_Batch)
test <- calculateBatchParameters(SCEList = SCEList)
class( assays(SCEList$splatter)$counts)
class( assays(SCEList$SPARSim)$counts)
rm(list = ls())
splatter_sce_Batch <- readRDS("E:/Datas/R_package_used_data/splat_sce_Batch.rds")
usethis::use_data(splatter_sce_Batch)
rm(list = ls())
data("splatter_sce_Batch", "SPARSim_sce_Batch")
test <- calculateBatchParameters(SCEList = SCEList)
SCEList <- list(SPARSim = SPARSim_sce_Batch, splatter=splatter_sce_Batch)
test <- calculateBatchParameters(SCEList = SCEList)
rm(list=ls())
getwd()
warnings()
detach("package:countSimEval", unload = TRUE)
remove.packages("countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")
devtools::install_github("Ruihan0307/countSimEval")

#' Calculate clustering evaluation indicators
#'
#' @param mat cluster_info
#' @return The value or list of clustering evaluation
#'
#' @import
#'
#' @export
calculateCluster <- function(mat, cluster_info){

    #将ddsList提取并赋值为matrix
    matrix <- as.matrix(mat)

    if (ncol(matrix) != length(cluster_info)) {
      stop("Error: The number of columns in the matrix does not match the length of cluster_info.")
    }

    #转换为SCE对象
    sce <- SingleCellExperiment(
      assays = list(counts = matrix)
    )

    sce <- logNormCounts(sce)

    ##使用原始数据计算距离
    #message("使用原始数据计算距离.")
    #raw_dist <- parallelDist::parDist(t(assays(sce)$counts))


    # 执行降维
    message("reducing the dimensionality of the raw data.")
    sce <- runTSNE(sce, ntop=nrow(sce))
    sce <- runPCA(sce)
    #sce <- runUMAP(sce)

    tsne_matrix <- reducedDim(sce, "TSNE")
    pca_matrix <- reducedDim(sce, "PCA")
    #umap_matrix <- reducedDim(sce, "UMAP")

    tsne_dist <- stats::dist(tsne_matrix)
    pca_dist <- stats::dist(pca_matrix)
    #umap_dist <- stats::dist(umap_matrix)

    message("calculating average silhouette width.")
    #计算ASW
    tsne_silhouette_width <- cluster::silhouette(x = as.numeric(as.factor(cluster_info)),
                                                 tsne_dist)
    tsne_average_silhouette <- mean(tsne_silhouette_width[, 3])

    pca_silhouette_width <- cluster::silhouette(x = as.numeric(as.factor(cluster_info)),
                                                pca_dist)
    pca_average_silhouette <- mean(pca_silhouette_width[, 3])

    #umap_silhouette_width <- cluster::silhouette(x = as.numeric(as.factor(cluster_info)),
    #                                             umap_dist)
    #umap_average_silhouette <- mean(umap_silhouette_width[, 3])

    #raw_silhouette_width <- cluster::silhouette(x = as.numeric(as.factor(cluster_info)),
    #                                            raw_dist)
    #raw_average_silhouette <- mean(raw_silhouette_width[, 3])

    message("calculating Connectivity.")
    #计算连通性
    tsne_con <- clValid::connectivity(distance = tsne_dist, clusters = cluster_info)
    pca_con <- clValid::connectivity(distance = pca_dist, clusters = cluster_info)
    #umap_con <- clValid::connectivity(distance = umap_dist, clusters = cluster_info)
    #raw_con <- clValid::connectivity(distance = raw_dist, clusters = cluster_info)

    message("calculating Dunn index")
    #计算DUNN指数
    tsne_dunn <- clValid::dunn(distance = tsne_dist, clusters = as.numeric(as.factor(cluster_info)))
    pca_dunn <- clValid::dunn(distance = pca_dist, clusters = as.numeric(as.factor(cluster_info)))
    #umap_dunn <- clValid::dunn(distance = umap_dist, clusters = as.numeric(as.factor(cluster_info)))
    #raw_dunn <- clValid::dunn(distance = raw_dist, clusters = as.numeric(as.factor(cluster_info)))

    message("calculating Calinski Harabasz Index")
    #计算Calinski - Harabasz指数
    #raw_CHI <- fpc::calinhara(t(matrix),as.numeric(as.factor(cluster_info)))
    tsne_CHI <- fpc::calinhara(tsne_matrix,as.numeric(as.factor(cluster_info)))
    pca_CHI <- fpc::calinhara(pca_matrix,as.numeric(as.factor(cluster_info)))
    #umap_CHI <- fpc::calinhara(umap_matrix,as.numeric(as.factor(cluster_info)))

    message("calculating Davies-Bouldin Index")
    #计算戴维斯 - 布尔丁(DBI)指数
    #raw_DB <- clusterSim::index.DB(t(matrix), as.numeric(as.factor(cluster_info)))$DB
    tsne_DB <- clusterSim::index.DB(tsne_matrix, as.numeric(as.factor(cluster_info)))$DB
    pca_DB <- clusterSim::index.DB(pca_matrix, as.numeric(as.factor(cluster_info)))$DB
    #umap_DB <- clusterSim::index.DB(umap_matrix, as.numeric(as.factor(cluster_info)))$DB

    data_list <- list(
      ASW = list(
        PCA_asw = pca_average_silhouette,
        TSNE_asw = tsne_average_silhouette
      ),
      Dunn = list(
        PCA_Dunn = pca_dunn,
        TSNE_Dunn = tsne_dunn
      ),
      connectivity = list(
        PCA_connectivity = pca_con,
        TSNE_connectivity = tsne_con
      ),
      CHI = list(
        PCA_CHI = pca_CHI,
        TSNE_CHI = tsne_CHI
      ),
      DBI = list(
        PCA_DBI = pca_DB,
        TSNE_DBI = tsne_DB
      )
    )
    return(data_list)
}

#' Calculate the difference in clustering evaluation metrics between the first dataset and other datasets
#'
#' @param mat cluster_info
#' @return The value or list of clustering evaluation
#'
#' @import
#'
#' @export
calculateClusterParameters <- function(SCEList){
  if (length(setdiff(unique(names(SCEList)),
                     c("", NA, NULL))) != length(SCEList)) {
    stop("If SCEList is List, it must be a named list, ",
         "with a unique name for each element.", call. = FALSE)
  }

  ##数据集数
  nDatasets <- length(SCEList)
  message(paste("There are a total of ", nDatasets, "datasets"))

  if(nDatasets==1){
    stop("SCEList must be a named list, ",
         "must have at least two elements.", call. = FALSE)
  }


  result_list <- lapply(SCEList, function(sce){
    expr_data <- assays(sce)$counts
    group <- sce$group
    calculateCluster(expr_data, group)
  })
 # return(result_list)
}


